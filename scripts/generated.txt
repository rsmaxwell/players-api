#!/bin/bash

TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S.%3N")
echo "${TIMESTAMP}   update-players-api"

SCHEME="https"
HOST="server.rsmaxwell.co.uk"
BASE="archiva/repository"
REPOSITORYID="releases"
GROUPID="com.rsmaxwell.players"
ARTIFACTID="players-api-amd64-linux"
PACKAGING=zip

players_api_username="@@players_api_username@@"

#####################################################################
# Compare dot separated strings (i.e. version format)
#     if arg1 'less than' arg2  then return: 2
#             'equal'                        0
#             'greater than'                 1
#####################################################################
function vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi

    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if (( 10#${ver1[i]} > 10#${ver2[i]} ))
        then
            return 1
        fi
        if (( 10#${ver1[i]} < 10#${ver2[i]} ))
        then
            return 2
        fi
    done
    return 0
}

#####################################################################
# Find the latest version available on the repository
#####################################################################

url="${SCHEME}://${HOST}/${BASE}/${REPOSITORYID}/${GROUPID//.//}/${ARTIFACTID}/maven-metadata.xml"

rm -rf maven-metadata.xml
wget --quiet "${url}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    echo "Could not download 'maven-metadata.xml'"
    exit 1
fi

line=$(grep "<latest>.*</latest>" maven-metadata.xml)
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    echo "Could not find latest version"
    exit 1
fi

regex="<latest>(.*)</latest>"
if [[ ! ${line} =~ ${regex} ]]
then
    echo "Error: $0[${LINENO}]"
    echo "Could not find latest version"
    exit 1
fi

rm -rf maven-metadata.xml
latest_version="${BASH_REMATCH[1]}"

#####################################################################
# Decide if we need to update 'players-api' by comparing the installed
# version with the latest version
#####################################################################
filename="/opt/players-api/version.json"

if [ -f "${filename}" ]; then
    installed_version=$(jq -r .version "${filename}")

    vercomp ${installed_version} ${latest_version}
    result=$?
    if [ ${result} == 2 ]; then
        echo "Need to update: ${installed_version} --> ${latest_version}"
    else
        echo "'players-api' is up-to-date: version ${installed_version}"
        exit 0
    fi
else
    echo "Need to update: ? --> ${latest_version}"
fi


#####################################################################
# Stop the 'players-api' service (if there is one)
#####################################################################
sudo systemctl stop players-api
result=$?
if [ ${result} -eq 0 ]; then
    : # ok
elif [ ${result} == 5 ]; then
    : # ok. service not found
else
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

#####################################################################
# remove 'players-api'
#####################################################################

sudo rm -rf /opt/players-api*


#####################################################################
# Download and extract the 'players-api' artifact from the repository
#####################################################################
url="${SCHEME}://${HOST}/${BASE}/${REPOSITORYID}/${GROUPID//.//}/${ARTIFACTID}/${latest_version}/${ARTIFACTID}-${latest_version}.${PACKAGING}"

download="/tmp/${ARTIFACTID}.${PACKAGING}"
rm -rf "${download}"
wget --output-document "${download}" --quiet "${url}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    echo "Could not download 'maven-metadata.xml'"
    exit 1
fi

directory="${ARTIFACTID}-${latest_version}"

sudo mkdir -p "/opt/${directory}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

currentDir=$(pwd)
cd "/opt/${directory}"

sudo unzip "${download}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

filename=$(ls players-api*)
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

rm -rf "${download}"

#######################################################################
# Make the directory symbolic link
#######################################################################
dirlinkname="players-api"

echo "Change the working directory to '/opt'"
cd /opt
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

echo "Make the directory symbolic link"
sudo ln -s "${directory}" "${dirlinkname}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

#######################################################################
# Make the file symbolic link
#######################################################################
filelinkname="players-api"

echo "Change the working directory to '/opt/players-api'"
cd "/opt/players-api"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

echo "Make the file symbolic link"
sudo ln -s "${directory}" "${filelinkname}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

#######################################################################
# Set file perms and ownership
#######################################################################
find "/opt/${directory}" -type d -exec sudo chmod 755 {} \;
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

find "/opt/${directory}" -type f -exec sudo chmod 644 {} \;
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

find "/opt/${directory}" -name "players-api*" -type f -exec sudo chmod 744 {} \;
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

sudo chown -R "${players_api_username}:${players_api_username}" "/opt/${directory}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

dirlinkpath="/opt/${dirlinkname}"
sudo chown --no-dereference "${players_api_username}:${players_api_username}" "${dirlinkpath}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

filelinkpath="/opt/${dirlinkname}/${filelinkname}"
sudo chown --no-dereference "${players_api_username}:${players_api_username}" "${filelinkpath}"
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi

#######################################################################
# Start the service
#######################################################################
echo "Start the 'players-api' service"
sudo systemctl start players-api
result=$?
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    echo "result = ${result}"
    exit 1
fi
